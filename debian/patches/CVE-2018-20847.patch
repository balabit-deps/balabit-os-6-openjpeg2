Description: fix integer overflow in opj_get_encoding_parameters
 This bug is known at three places in the source code:
 opj_get_all_encoding_parameters() and opj_tcd_init_tile() in pi.c and tcd.c
 (both fixed _before_ the release of 2.1.2), and opj_get_encoding_parameters()
 in pi.c. This patch addresses the issue in opj_get_encoding_parameters().
Author: Young_X <YangX92@hotmail.com>
Origin: upstream, https://github.com/uclouvain/openjpeg/commit/c58df149900df862
--- a/src/lib/openjp2/pi.c	2019-10-08 15:42:07.754437740 +0200
+++ b/src/lib/openjp2/pi.c	2019-10-08 15:46:03.364003550 +0200
@@ -574,6 +574,9 @@
 	/* position in x and y of tile */
 	OPJ_UINT32 p, q;
 
+	/* non-corrected (in regard to image offset) tile offset */
+	OPJ_UINT32 l_tx0, l_ty0;
+
 	/* preconditions */
 	assert(p_cp != 00);
 	assert(p_image != 00);
@@ -589,10 +592,12 @@
 	q = p_tileno / p_cp->tw;
 
 	/* find extent of tile */
-	*p_tx0 = opj_int_max((OPJ_INT32)(p_cp->tx0 + p * p_cp->tdx), (OPJ_INT32)p_image->x0);
-	*p_tx1 = opj_int_min((OPJ_INT32)(p_cp->tx0 + (p + 1) * p_cp->tdx), (OPJ_INT32)p_image->x1);
-	*p_ty0 = opj_int_max((OPJ_INT32)(p_cp->ty0 + q * p_cp->tdy), (OPJ_INT32)p_image->y0);
-	*p_ty1 = opj_int_min((OPJ_INT32)(p_cp->ty0 + (q + 1) * p_cp->tdy), (OPJ_INT32)p_image->y1);
+	l_tx0 = p_cp->tx0 + p * p_cp->tdx; /* can't be greater than p_image->x1 so won't overflow */
+	*p_tx0 = (OPJ_INT32)opj_uint_max(l_tx0, p_image->x0);
+	*p_tx1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_tx0, p_cp->tdx), p_image->x1);
+	l_ty0 = p_cp->ty0 + q * p_cp->tdy; /* can't be greater than p_image->y1 so won't overflow */
+	*p_ty0 = (OPJ_INT32)opj_uint_max(l_ty0, p_image->y0);
+	*p_ty1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_ty0, p_cp->tdy), p_image->y1);
 
 	/* max precision is 0 (can only grow) */
 	*p_max_prec = 0;
