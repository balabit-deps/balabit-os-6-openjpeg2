Subject: avoid divisions by zero / undefined behaviour on shift (CVE-2018-14423)
Author: Young_X <YangX92@hotmail.com>
Origin: https://github.com/uclouvain/openjpeg/commit/bd88611ed9ad7144ec4f3de54790cd848175891b
Bug: https://github.com/uclouvain/openjpeg/issues/1123
Bug-Debian: https://bugs.debian.org/904873
--- a/src/lib/openjp3d/pi.c	2018-12-22 12:11:03.000000000 +0100
+++ b/src/lib/openjp3d/pi.c	2018-12-22 12:11:36.000000000 +0100
@@ -215,6 +215,14 @@
 						rpx = res->pdx + levelnox;
 						rpy = res->pdy + levelnoy;
 						rpz = res->pdz + levelnoz;
+
+						/* To avoid divisions by zero / undefined behaviour on shift */
+						if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
+							rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy ||
+							rpz >= 31 || ((comp->dz << rpz) >> rpz) != comp->dz) {
+							continue;
+						}
+
 						if ((!(pi->x % (comp->dx << rpx) == 0) || (pi->x == pi->tx0 && (trx0 << levelnox) % (1 << rpx)))) {
 							continue;
 						}
@@ -309,6 +317,14 @@
 						rpx = res->pdx + levelnox;
 						rpy = res->pdy + levelnoy;
 						rpz = res->pdz + levelnoz;
+
+						/* To avoid divisions by zero / undefined behaviour on shift */
+						if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
+							rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy ||
+							rpz >= 31 || ((comp->dz << rpz) >> rpz) != comp->dz) {
+							continue;
+						}
+
 						if ((!(pi->x % (comp->dx << rpx) == 0) || (pi->x == pi->tx0 && (trx0 << levelnox) % (1 << rpx)))) {
 							continue;
 						}
@@ -400,6 +416,14 @@
 						rpx = res->pdx + levelnox;
 						rpy = res->pdy + levelnoy;
 						rpz = res->pdz + levelnoz;
+
+						/* To avoid divisions by zero / undefined behaviour on shift */
+						if (rpx >= 31 || ((comp->dx << rpx) >> rpx) != comp->dx ||
+							rpy >= 31 || ((comp->dy << rpy) >> rpy) != comp->dy ||
+							rpz >= 31 || ((comp->dz << rpz) >> rpz) != comp->dz) {
+							continue;
+						}
+
 						if ((!(pi->x % (comp->dx << rpx) == 0) || (pi->x == pi->tx0 && (trx0 << levelnox) % (1 << rpx)))) {
 							continue;
 						}
